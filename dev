#!/usr/bin/env bash
set -e

#CLI_WORKDIR="${BASH_SOURCE%/*}"
CLI_WORKDIR="${HOME}/.dev-cli"
if [[ ! -d "$CLI_WORKDIR" ]]; then CLI_WORKDIR="$PWD"; fi
export CLI_WORKDIR

CLI_COMMANDS=("$CLI_WORKDIR/commands")
export CLI_COMMANDS

CLI_LOGS=("$CLI_WORKDIR/logs")
export CLI_LOGS

# Load config
CLI_CONFIG=("$CLI_WORKDIR/config")
export CLI_CONFIG

if [ -f "$CLI_CONFIG" ]; then
  # shellcheck source=config
  . "$CLI_CONFIG"
fi

# shellcheck source=common
. "$CLI_WORKDIR/common"

cli_help() {
  local cli_name=${0##*/}
  echo "
Developer CLI
Version: $(cat "$CLI_WORKDIR"/VERSION)
https://github.com/klement97/dev-cli

Usage: $cli_name [command]

Commands:
  configure           Configure the CLI to your use
  update              Update the CLI by pulling the latest version with git
  startb or b         Start the backend development server
  startf or f         Start the frontend development server
  restore_db or rdb   Restore the development database
  exec                Execute a given command in a given docker container
  *                   This help screen
"
  exit 1
}

case "$1" in

configure)
  "$CLI_COMMANDS/configure" | tee -ia "$CLI_LOGS/configure.log"
  ;;

update)
  "$CLI_COMMANDS/update" | tee -ia "$CLI_LOGS/update.log"
  ;;

startb | b)
  # shellcheck source=commands/start_backend
  . "$CLI_COMMANDS/start_backend"
  startb "$BACKEND_PATH" | tee -ia "$CLI_LOGS/start_backend.log"
  ;;

startf | f)
  # shellcheck source=commands/start_frontend
  . "$CLI_COMMANDS/start_frontend"
  startf "$FRONTEND_PATH" | tee -ia "$CLI_LOGS/start_frontend.log"
  ;;

restore_db | rdb)
  # shellcheck source=commands/restore_database
  . "$CLI_COMMANDS/restore_database"
  restore "$@" | tee -ia "$CLI_LOGS/restore_database.log"
  ;;

exec)
  # shellcheck source=commands/docker_exec
  . "$CLI_COMMANDS/docker_exec"
  exec "$@" | tee -ia "$CLI_LOGS/docker_exec.log"
  ;;

*)
  cli_help
  ;;
esac
